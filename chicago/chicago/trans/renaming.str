module renaming

imports 
	signatures/-
	analysis
	pp
	libspoofax/stratego/debug
	libspoofax/ui/dialogs
	libspoofax/sdf/pp
	
	libspoofax/term/annotation
  	libspoofax/term/origin
  	libspoofax/analysis/constraint
  
  	statix/runtime/-
  	statixruntime
  	statix/api

  	
rules // menu action strategies    
  rename-action:
    (selected-term, _, ast, path, project-path) -> (path, result)
    where
		new-name := <read-new-name> path
        ; {| ErrorMessage: renamed-ast := <rename(|selected-term, new-name, path) <+ show-errors; !ast> ast |}
	    //; (_, _, result) := <construct-textual-change> (ast, renamed-ast)
	    ; result := <pp-chicago-string> renamed-ast

rename-action-debug :
    (selected-term, _, ast, path, project-path) -> (paths, results)
    with
		(paths, asts) := <get-analysed-asts>
		; analysis := <get-project-analysis>
		; resolution-relation :=  <calc-resolution-relation-project(|analysis)> asts
		; <ppdebug(|"resolution-relation: ")> resolution-relation
		; selected-occ := <find-name-index(|ast, resolution-relation)> selected-term
		; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
		; new-name := <read-new-name> path
		; renamed-asts := <map(rename-ast(|target-indices, new-name))> asts
		; check-capture(|paths, renamed-asts, resolution-relation)
		; results := <map(pp-chicago-string)> renamed-asts
	
	get-analysed-asts: _ -> (paths, asts)
	where
	  project-asts := <get-project-analyzed-asts>
	  ; (paths, asts) := <filter(not(is-project-entry));unzip> project-asts	    
	    
    rename(|selected-term, new-name, path): ast -> renamed-asts
    where
         analysis := <get-project-analysis>
        ; (paths, asts) := <get-analysed-asts> 
    	; resolution-relation :=  <calc-resolution-relation-project(|analysis)> ast
    	; <ppdebug(|"resolution-relation:")> resolution-relation
    	; selected-occ := <find-name-index(|ast, resolution-relation)> selected-term
	    ; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
		; renamed-asts := <map(rename-ast(|target-indices, new-name))> asts
		; check-capture(|paths, renamed-asts, resolution-relation)     

rules // Step 1: Calculate Resolution Relation

  calc-resolution-relation-project(|analysis): asts -> res-rels
    where
      res-rels := <mapconcat(calc-resolution-relation-file(|analysis))> asts

  calc-resolution-relation-file(|analysis): ast -> relation
    where
  	  relation := <collect(get-dec-ref-pair(|analysis) <+ get-dec-reflexive-pair(|analysis))> ast
  	
  get-dec-ref-pair(|analysis): t -> (ref-index, dec-index)
    where
  	  <is-string> t
  	  ; dec := <stx--get-ast-property(|analysis, Ref())> t
  	  ; ref-index := <stx--get-ast-index> t
  	  ; dec-index := <stx--get-ast-index> dec

  get-dec-reflexive-pair(|analysis): t -> (dec-index, dec-index)
    where
  	  <is-string> t
  	  ; dec := <stx--get-ast-property(|analysis, Prop("decl"))> 
  	  ; dec-index := <stx--get-ast-index> dec

  is-user-defined: (ref, dec@TermIndex(path, num-index)) -> <id>
    where
      <not(eq)> (num-index, 0)
  	    
rules // Step 2: Find name index in selection
  find-name-index(|ast, res-rel): term -> occ-index
    where
      <check-selection(|term, ast)> ast
      ; occ-index := <collect-one(get-name-index(|res-rel))> term  
        <+ add-error(|"Renaming impossible", "The selected term cannot be renamed.")

  get-name-index(|res-rel): term -> occurrence
    where
      if (<is-list> term) then
        <map(get-name-index(|res-rel))> term
      else
        <is-string> term
        ; term-index := <stx--get-ast-index> term
        ; occurrence := <fetch-elem(res-pair-contains(|term-index))> res-rel
      end	
			
  res-pair-contains(|term-index): (ref-index, dec-index) -> term-index 
    where
      <eq> (term-index, ref-index) <+ <eq> (term-index, dec-index)   


rules //Step 4: Rename terms	 	
  rename-ast(|target-indices, new-name): ast -> renamed-ast
    where
      renamed-ast := <bottomup(try(rename-term(|target-indices, new-name)))> ast

  rename-term(|target-indices, new-name): term -> new-name
    where
      <is-string> term
      ; term-index := <stx--get-ast-index> term
      ; <elem> (term-index, target-indices)
	  
rules //Step 4: Checking for capture
	 
  check-capture(|paths, asts, resolution-relation) =
		multi :=  < make-analyze-multi> (paths, asts)
		; analysis-result := <stx-editor-analyze(pre-analyze, post-analyze|"statics", "projectOk", "fileOk")> multi
		; <ppdebug(|"analysis-result: ")> analysis-result
		; new-asts := <get-new-asts> analysis-result
		; new-analysis := <get-new-analysis> analysis-result
		; new-resolution-relation := <calc-resolution-relation-project(|new-analysis); qsort(dec-ref-pair-gt)> new-asts
		; <ppdebug(|"new-resolution-relation: ")> new-resolution-relation
		; old-resolution-relation := <qsort(dec-ref-pair-gt)> resolution-relation
		; <ppdebug(|"old-resolution-relation: ")> old-resolution-relation
		; <add-error-on-fail(eq|"Capture detecte", "This renaming leads to name capture")> (old-resolution-relation, new-resolution-relation) 
		
  make-analyze-multi: (paths, asts) ->  AnalyzeMulti((".", project), changes, (), ())
    where
      project-analyses := <get-project-constraint-analyses>
      // ; <ppdebug(|"project-asts:")> project-analyses
      ; (_, analysis) := <fetch-elem(is-project-entry)> project-analyses
      ; project := Cached(analysis)
      ; files := <zip> (paths, asts)
      ; changes := <map(make-changed(|project-analyses))> files
     //  ; <ppdebug(|"changes: ")> changes*/
       
  make-changed(|project-analyses): (path, ast) -> (path, Changed(ast, analysis))
    where
      (_, analysis) := <fetch-elem(get-entry(|path))> project-analyses            
      
      
  get-new-analysis:  AnalysisResult(analysis-list) -> analysis-object
    where
		 <ppdebug(|"analysis-list: ")> analysis-list
		; (_, (Update(project-analysis, _, _, _))) := <fetch-elem(is-project-entry)> analysis-list
		 ; <ppdebug(|"project-analysis: ")> project-analysis
		; analysis-object := <get-analysis-object> project-analysis 
		
  get-new-asts:  AnalysisResult(analysis-list) -> analyzed-asts
    where
		analyses := <filter(not(is-project-entry))> analysis-list
		; analyzed-asts := <map(get-analyzed-ast)> analyses
		
  get-analyzed-ast : (_, Full(ast, FileAnalysis(_, analysis), _, _,_)) -> (analysis, ast)		  		
		
  get-project-analysis: _ -> analysis-object
    where 	
      project-analyses := <get-project-constraint-analyses>
      ; (_, analysis) := <fetch-elem(is-project-entry)> project-analyses
      ; analysis-object := <get-analysis-object> analysis 	
    
  get-analysis-object: ProjectAnalysis(_, _, _, analysis-object) -> analysis-object
      
	dec-ref-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
	where
		<term-index-gt> (ref-1, ref-2)
															
	term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
	where 
		<gt> (num-index-1, num-index-2) 
    
rules // Utility strategies
  read-new-name: _ -> new-name
    where 	
      new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"

  check-selection(|selected-term, ast) =
    <not(eq)> (selected-term, ast)
  	<+ add-error(|"Invalid selection", "Please select a name")
  	
  is-project-entry = get-entry(|".")

  get-entry(|search-path): (path, _) -> <id>
    where
      <eq> (path, search-path)    	
  	
  add-error(|title, message) =
    rules(
      ErrorMessage :+ () -> (title, message)
    ); fail
      
  show-errors =    
    [(title, message) | _] := <bagof-ErrorMessage> ()
    ; <show-dialog(|title, "ERROR")> message
     
  add-error-on-fail(s|title, message) =
    s <+ add-error(|title, message); fail
						  
rules // external rules
	external calc-name-cluster(|)
	
    
