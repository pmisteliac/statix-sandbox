module renaming

imports 
	signatures/-
	analysis
	pp
	libspoofax/stratego/debug
	libspoofax/ui/dialogs
	libspoofax/sdf/pp
	
	libspoofax/term/annotation
  	libspoofax/term/origin
  	libspoofax/analysis/constraint
  
  	statix/runtime/-
  	statixruntime
  	statix/api

  	
rules // menu action strategies    
  rename-action:
    (selected-term, _, ast, path, project-path) -> (path, result)
    where
		new-name := <read-new-name> path
        ; {| ErrorMessage: renamed-ast := <rename(|selected-term, new-name, path) <+ show-errors; !ast> ast |}
        ; <ppdebug0> "rename"
	    //; (_, _, result) := <construct-textual-change> (ast, renamed-ast)
	    ; result := <pp-chicago-string> renamed-ast
	    ; <ppdebug1> "rename"

rename-action-debug :
    (selected-term, _, ast, path, project-path) -> (paths, results)
    with
		(paths, asts) := <get-analysed-asts>
		//; <ppdebug(|"asts: ")> asts
		//; <ppdebug(|"paths: ")> paths
		; analysis := <get-project-analysis>
		; resolution-relation :=  <calc-resolution-relation-m(|analysis)> asts
		; <ppdebug(|"resolution-relation: ")> resolution-relation
		; selected-occ := <find-occurrence(|ast, resolution-relation)> selected-term
		; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
		; new-name := <read-new-name> path
		; renamed-asts := <map(rename-ast(|target-indices, new-name))> asts
		// ; <ppdebug(|"renamed-asts: ")> renamed-asts
		; check-capture(|paths, renamed-asts, resolution-relation)
		; results := <map(pp-chicago-string)> renamed-asts
	
	get-analysed-asts: _ -> (paths, asts)
	where
	  project-asts := <get-project-analyzed-asts>
	  ; (paths, asts) := <filter(not(is-project-entry));unzip> project-asts	    
	    
    rename(|selected-term, new-name, path): ast -> renamed-ast
    where
         analysis := <stx--get-ast-analysis> ast
    	; resolution-relation :=  <calc-resolution-relation-file(|analysis)> ast
    	; <ppdebug(|"resolution-relation:")> resolution-relation
    	; selected-occ := <find-occurrence(|ast, resolution-relation)> selected-term
	    ; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
		; renamed-ast := <rename-ast(|target-indices, new-name)> ast
		; check-capture(|renamed-ast, resolution-relation, path)     
		
rules // Step 1M: Calculate Resolution Relation		

  calc-resolution-relation-m(|analysis): asts -> res-rels
  where
    res-rels := <calc-resolution-relation-project(|analysis)> asts
  	
  is-project-entry: (path, _) -> <id>
  where
  	<eq> (path, ".")
  	
  get-entry(|search-path): (path, _) -> <id>
  where
  	<eq> (path, search-path)  	
	    
rules // Step 1: Calculate Resolution Relation

  calc-resolution-relation-project(|analysis): asts -> res-rels
  where
     res-rels := <mapconcat(calc-resolution-relation-file(|analysis))> asts

  calc-resolution-relation-file(|analysis): ast -> user-defined-relation
  where
  	ref-dec-pairs  := <collect(get-dec-ref-pair(|analysis))> ast
  	; <ppdebug(|"ref-dec-pairs")> ref-dec-pairs
  	; decs-reflexive-pairs := <collect(get-dec-reflexive-pair(|analysis))> ast
  	; <ppdebug(|"dec-pairs")> decs-reflexive-pairs
  	; relation := <conc;make-set> (decs-reflexive-pairs, ref-dec-pairs)
  	; user-defined-relation := <filter(is-not-built-in)> relation
  	
  get-dec-ref-pair(|analysis): ref -> (ref-index, dec-index)
  where
  	<is-string> ref
  	; dec := <stx--get-ast-property(|analysis, Ref())> ref
  	; ref-index@TermIndex(ref-path, _) := <stx--get-ast-index> ref
  	; if index := <stx--get-ast-index> dec then
  		dec-index := index
  	  else
  	    dec-index := TermIndex(ref-path,0)
  	  end

  get-dec-reflexive-pair(|analysis): t -> (dec-index, dec-index)
  where
  	<is-string> t
  	; dec := <stx--get-ast-property(|analysis, Prop("decl"))> 
  	; dec-index := <stx--get-ast-index> dec
  	  
  make-dec-reflexive-pair: (ref-index, dec-index) -> (dec-index, dec-index)  	  
  	
  is-not-built-in: (ref, dec@TermIndex(path, num-index)) -> <id>
  where
  	<not(eq)> (num-index, 0)
  	    
rules // Step 2: Find occurrence in selection
	
  find-occurrence(|ast, resolution-relation): selected-term -> occ
  where
    check-selection(|selected-term, ast)
    ; occs := <get-all-occs> resolution-relation
    ; occ := <add-error-on-fail(collect-one(get-occurrence(|occs))|"Renaming impossible", "The selected term cannot be renamed.")> selected-term
    
  	
  get-all-occs: resolution-relation -> all-occs
	where
	decs := <map(get-dec)> resolution-relation
    ; refs  := <map(get-ref)> resolution-relation
    ; all-occs := <conc;nub> (decs, refs)
    	
  get-occurrence(|occs): term -> occurrence
  where
    if (<is-list> term) then
      <map(get-occurrence(|occs))> term
    else
      <is-string> term
      ; term-index := <stx--get-ast-index> term
      ; occurrence := <fetch-elem(?term-index)> occs
    end		
    
  get-dec: (ref, dec) -> dec
  
  get-ref: (ref, dec) -> ref 


rules //Step 3: Rename terms	 	

  rename-ast(|target-indices, new-name): ast -> renamed-ast
  where
	renamed-ast := <bottomup(try(rename-term(|target-indices, new-name)))> ast

  rename-term(|target-indices, new-name): term -> new-term
	where
		<is-string> term
	 	; term-index := <stx--get-ast-index> term
	    ; <elem> (term-index, target-indices)
	    ; new-term := <stx--set-ast-index(|term-index)> new-name
	  
rules //Step 4: Checking for capture
	 
  check-capture(|paths, asts, resolution-relation) =
		multi :=  < make-analyze-multi> (paths, asts)
		; analysis-result := <stx-editor-analyze(pre-analyze, post-analyze|"statics", "projectOk", "fileOk")> multi
		; <ppdebug(|"analysis-result: ")> analysis-result
		; new-asts := <get-new-asts> analysis-result
		; new-analysis := <get-new-analysis> analysis-result
		; new-resolution-relation := <calc-resolution-relation-project(|new-analysis); qsort(dec-ref-pair-gt)> new-asts
		; <ppdebug(|"new-resolution-relation: ")> new-resolution-relation
		; old-resolution-relation := <qsort(dec-ref-pair-gt)> resolution-relation
		; <ppdebug(|"old-resolution-relation: ")> old-resolution-relation
		; <add-error-on-fail(eq|"Capture detecte", "This renaming leads to name capture")> (old-resolution-relation, new-resolution-relation) 
		
  make-analyze-multi: (paths, asts) ->  AnalyzeMulti((".", project), changes, (), ())
    where
      project-analyses := <get-project-constraint-analyses>
      // ; <ppdebug(|"project-asts:")> project-analyses
      ; (_, analysis) := <fetch-elem(is-project-entry)> project-analyses
      ; project := Cached(analysis)
      ; files := <zip> (paths, asts)
      ; changes := <map(make-changed(|project-analyses))> files
     //  ; <ppdebug(|"changes: ")> changes*/
       
  make-changed(|project-analyses): (path, ast) -> (path, Changed(ast, analysis))
    where
      (_, analysis) := <fetch-elem(get-entry(|path))> project-analyses            
      
      
  get-new-analysis:  AnalysisResult(analysis-list) -> analysis-object
    where
		 <ppdebug(|"analysis-list: ")> analysis-list
		; (_, (Update(project-analysis, _, _, _))) := <fetch-elem(is-project-entry)> analysis-list
		 ; <ppdebug(|"project-analysis: ")> project-analysis
		; analysis-object := <get-analysis-object> project-analysis 
		
  get-new-asts:  AnalysisResult(analysis-list) -> analyzed-asts
    where
		analyses := <filter(not(is-project-entry))> analysis-list
		; analyzed-asts := <map(get-analyzed-ast)> analyses
		
  get-analyzed-ast : (_, Full(ast, FileAnalysis(_, analysis), _, _,_)) -> (analysis, ast)		  		
		
  get-project-analysis: _ -> analysis-object
    where 	
      project-analyses := <get-project-constraint-analyses>
      ; (_, analysis) := <fetch-elem(is-project-entry)> project-analyses
      ; analysis-object := <get-analysis-object> analysis 	
    
  get-analysis-object: ProjectAnalysis(_, _, _, analysis-object) -> analysis-object
      
	dec-ref-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
	where
		<term-index-gt> (ref-1, ref-2)
															
	term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
	where 
		<gt> (num-index-1, num-index-2) 
    
rules // UI strategies
	read-new-name: _ -> new-name
	where 	
   		new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"
   
  check-selection(|selected-term, ast) =
    <add-error-on-fail(not(eq)|"Invalid selection", "Please select a name")> (selected-term, ast)
  	
rules // error handling strategies 
  add-error(|title, message) =
    rules(
      ErrorMessage :+ () -> (title, message)
    )
     
  add-error-on-fail(s|title, message) =
    s <+ add-error(|title, message); fail
      
  show-errors =    
    [(title, message) | _] := <bagof-ErrorMessage> ()
    ; <show-dialog(|title, "ERROR")> message      	
						  
rules // external rules
	external calc-name-cluster(|)
	
    
